DROP PUBLIC DATABASE LINK DBL_SERVERSIDE_FSOTCK;
CREATE PUBLIC DATABASE LINK DBL_SERVERSIDE_FSOTCK CONNECT TO FSTOCK IDENTIFIED BY FSTOCK USING 'FSTOCK_LOCAL';

DROP SYNONYM EMPLOYEES_SS;
CREATE SYNONYM EMPLOYEES_SS FOR EMPLOYEES@DBL_SERVERSIDE_FSOTCK;
DROP SYNONYM JOBS_SS;
CREATE SYNONYM JOBS_SS FOR JOBS@DBL_SERVERSIDE_FSOTCK;
DROP SYNONYM SALES_SS;
CREATE SYNONYM SALES_SS FOR SALES@DBL_SERVERSIDE_FSOTCK;
DROP SYNONYM SALE_ITEMS_SS;
CREATE SYNONYM SALE_ITEMS_SS FOR SALE_ITEMS@DBL_SERVERSIDE_FSOTCK;
DROP SYNONYM ITEMS_SS;
CREATE SYNONYM ITEMS_SS FOR ITEMS@DBL_SERVERSIDE_FSOTCK;
DROP SYNONYM CUSTOMERS_SS;
CREATE SYNONYM CUSTOMERS_SS FOR CUSTOMERS@DBL_SERVERSIDE_FSOTCK;

DROP PUBLIC DATABASE LINK DBL_SERVERLOCAL_FSOTCK;
CREATE PUBLIC DATABASE LINK DBL_SERVERLOCAL_FSOTCK CONNECT TO FSTOCK IDENTIFIED BY FSTOCK USING 'FSTOCK_LOOPBACK';

DROP SYNONYM EMPLOYEES_SL;
CREATE SYNONYM EMPLOYEES_SL FOR EMPLOYEES@DBL_SERVERLOCAL_FSOTCK;
DROP SYNONYM JOBS_SL;
CREATE SYNONYM JOBS_SL FOR JOBS@DBL_SERVERLOCAL_FSOTCK;
DROP SYNONYM SALES_SL;
CREATE SYNONYM SALES_SL FOR SALES@DBL_SERVERLOCAL_FSOTCK;
DROP SYNONYM SALE_ITEMS_SL;
CREATE SYNONYM SALE_ITEMS_SL FOR SALE_ITEMS@DBL_SERVERLOCAL_FSOTCK;
DROP SYNONYM ITEMS_SL;
CREATE SYNONYM ITEMS_SL FOR ITEMS@DBL_SERVERLOCAL_FSOTCK;
DROP SYNONYM CUSTOMERS_SL;
CREATE SYNONYM CUSTOMERS_SL FOR CUSTOMERS@DBL_SERVERLOCAL_FSOTCK;

--------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP------------------------------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP----------------------

DROP MATERIALIZED VIEW ALL_CUSTOMERS;
CREATE MATERIALIZED VIEW ALL_CUSTOMERS BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT CUST_DNI, CUST_NAME, CUST_DBIRTH, CUST_ADDRESS, CUST_ZIP, CUST_STATE, CUST_COUNTRY, CUST_PHONE, 'CUMBRES' AS SUCURSAL FROM CUSTOMERS_SL UNION ALL SELECT CUST_DNI, CUST_NAME, CUST_DBIRTH, CUST_ADDRESS, CUST_ZIP, CUST_STATE, CUST_COUNTRY, CUST_PHONE, 'HUERTA' AS SUCURSAL FROM CUSTOMERS_SS; 
DROP MATERIALIZED VIEW CUSTOMERS_CUMBRES;
CREATE MATERIALIZED VIEW CUSTOMERS_CUMBRES BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT * FROM CUSTOMERS_SS;
DROP MATERIALIZED VIEW CUSTOMERS_HUERTA;
CREATE MATERIALIZED VIEW CUSTOMERS_HUERTA BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT * FROM CUSTOMERS_SL;

DROP MATERIALIZED VIEW ALL_ITEMS;
CREATE MATERIALIZED VIEW ALL_ITEMS BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT ITEM_CODE, ITEM_DESCRIPTION, UPRICE, STOCK, UNIT_TYPE , 'HUERTA' AS UBICACION FROM ITEMS_SL UNION ALL SELECT ITEM_CODE, ITEM_DESCRIPTION, UPRICE, STOCK, UNIT_TYPE , 'CUMBRES' AS UBICACION FROM ITEMS_SS;
DROP MATERIALIZED VIEW ALL_SALES;

DESC ALL_ITEMS;
DESC ITEMS_SL;
CREATE MATERIALIZED VIEW ALL_SALES BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT * FROM SALES_SL UNION ALL SELECT * FROM SALES_SS;
DROP MATERIALIZED VIEW ALL_EMPLOYEES;
CREATE MATERIALIZED VIEW ALL_EMPLOYEES BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT DNI, ENAME, HDATE, JID, 'CUMBRES' AS SUCURSAL FROM EMPLOYEES_SL UNION ALL SELECT DNI, ENAME, HDATE, JID , 'HUERTA' FROM EMPLOYEES_SS;

DROP MATERIALIZED VIEW ALL_VENTAS;
CREATE MATERIALIZED VIEW ALL_VENTAS BUILD IMMEDIATE REFRESH COMPLETE ON DEMAND AS SELECT TO_CHAR(SALE_DATE) "FECHA VENTA", SALE_TOTAL "TOTAL" , SALE_ART_COUNT "ARTICULOS" , SALE_CUSTOMER_ID "ID CLIENTE" , SALE_EMPLOYEE_ID "ID EMPLEADO" , 'CUMBRES' AS SUCURSAL
    FROM SALES_SL UNION ALL SELECT TO_CHAR(SALE_DATE) "FECHA VENTA", SALE_TOTAL "TOTAL" , SALE_ART_COUNT "ARTICULOS" , SALE_CUSTOMER_ID "ID CLIENTE" , SALE_EMPLOYEE_ID "ID EMPLEADO" , 'HUERTA' AS SUCURSAL FROM SALES_SS;

--------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP------------------------------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP----------------------

CREATE OR REPLACE PROCEDURE SP_AUTHUSER(USRNAME VARCHAR2, USRPASS VARCHAR2, GRES OUT SYS_REFCURSOR) AUTHID CURRENT_USER AS
BEGIN
    DBMS_OUTPUT.PUT_LINE(USRNAME);
    DBMS_OUTPUT.PUT_LINE(USRPASS);
    OPEN GRES FOR SELECT COUNT(*) FROM (SELECT * FROM USERS WHERE USR_NICKNAME = USRNAME AND USR_PASSWORD = USRPASS);
END;

CREATE OR REPLACE PROCEDURE SP_ALLCUSTOMERS(GRES OUT SYS_REFCURSOR) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_CUSTOMERS');
    OPEN GRES FOR SELECT * FROM ALL_CUSTOMERS;
END;

CREATE OR REPLACE PROCEDURE SP_CUSTOMERSBYSUC(GRES OUT SYS_REFCURSOR, SUCNAME VARCHAR2) AUTHID CURRENT_USER AS
BEGIN
    IF SUCNAME = 'CUMBRES' THEN
        DBMS_MVIEW.REFRESH('CUSTOMERS_CUMBRES');
        OPEN GRES FOR SELECT * FROM CUSTOMERS_CUMBRES;
    ELSIF SUCNAME = 'HUERTA' THEN
        DBMS_MVIEW.REFRESH('CUSTOMERS_HUERTA');
        OPEN GRES FOR SELECT * FROM CUSTOMERS_HUERTA;
    END IF;
END;

CREATE OR REPLACE PROCEDURE SP_CUSTOMERSNAME(GRES OUT SYS_REFCURSOR, CNAME VARCHAR2) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_CUSTOMERS');
    OPEN GRES FOR SELECT * FROM ALL_CUSTOMERS WHERE CUST_NAME LIKE CNAME||'%';
END;

--------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP------------------------------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP----------------------

CREATE OR REPLACE PROCEDURE SP_ALLEMPLOYEES(GRES OUT SYS_REFCURSOR) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_EMPLOYEES');
    OPEN GRES FOR SELECT * FROM ALL_EMPLOYEES;
END;

CREATE OR REPLACE PROCEDURE SP_ALLEMPLOYEESNAME(GRES OUT SYS_REFCURSOR, XNAME VARCHAR2) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_EMPLOYEES');
    OPEN GRES FOR SELECT * FROM ALL_EMPLOYEES WHERE ENAME LIKE XNAME||'%';
END;

CREATE OR REPLACE PROCEDURE SP_EMPLOYEES_SUCURSAL(GRES OUT SYS_REFCURSOR, XNAME VARCHAR2) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_EMPLOYEES');
    OPEN GRES FOR SELECT * FROM ALL_EMPLOYEES WHERE SUCURSAL = XNAME;
END;


--------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP------------------------------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP----------------------
CREATE OR REPLACE PROCEDURE SP_SALES_SUCURSAL(GRES OUT SYS_REFCURSOR, XNAME VARCHAR2) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_VENTAS');
    OPEN GRES FOR SELECT * FROM ALL_VENTAS WHERE SUCURSAL = XNAME;
END;

CREATE OR REPLACE PROCEDURE SP_SALES_IDEMPLEADO(GRES OUT SYS_REFCURSOR, XNAME VARCHAR2) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_VENTAS');
    OPEN GRES FOR SELECT * FROM ALL_VENTAS WHERE "ID EMPLEADO" = XNAME;
END;

CREATE OR REPLACE PROCEDURE SP_SALES_IDCLIENTE(GRES OUT SYS_REFCURSOR, XNAME VARCHAR2) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_VENTAS');
    OPEN GRES FOR SELECT * FROM ALL_VENTAS WHERE "ID CLIENTE" = XNAME;
END;

CREATE OR REPLACE PROCEDURE SP_SALES_FECHA(GRES OUT SYS_REFCURSOR, XNAME VARCHAR2) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_VENTAS');
    OPEN GRES FOR SELECT * FROM ALL_VENTAS WHERE "FECHA VENTA"  = XNAME;
END;

CREATE OR REPLACE PROCEDURE SP_ALLSALES(GRES OUT SYS_REFCURSOR) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_VENTAS');
    OPEN GRES FOR SELECT * FROM ALL_VENTAS;
END;

--------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP------------------------------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP----------------------
CREATE OR REPLACE PROCEDURE SP_ALLITEMS(GREF OUT SYS_REFCURSOR) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_ITEMS');
    OPEN GREF FOR SELECT * FROM ALL_ITEMS;
END;

CREATE OR REPLACE PROCEDURE SP_ITEMSBYNAME(GREF OUT SYS_REFCURSOR, INAME VARCHAR2) AUTHID CURRENT_USER AS
BEGIN
    DBMS_MVIEW.REFRESH('ALL_ITEMS');
    OPEN GREF FOR SELECT * FROM ALL_ITEMS WHERE ITEM_DESCRIPTION LIKE INAME||'%';
END;
--------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP------------------------------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP----------------------
CREATE OR REPLACE PROCEDURE SP_GETCUSTOMER(XDNI VARCHAR2, GRES OUT SYS_REFCURSOR) AS
BEGIN
    OPEN GRES FOR SELECT * FROM ALL_CUSTOMERS WHERE CUST_DNI = XDNI;
END;
CREATE OR REPLACE PROCEDURE SP_INSERTCUSTOMER(XDNI VARCHAR2, XNAME VARCHAR2, XFECHA VARCHAR2, XDIR VARCHAR2, XZIP VARCHAR2, XEDO VARCHAR2, XPAIS VARCHAR2, XTEL VARCHAR2, SUCURSAL VARCHAR2, GRES OUT SYS_REFCURSOR) AUTHID CURRENT_USER AS
BEGIN
    BEGIN
        IF SUCURSAL = 'HUERTA' THEN
            INSERT INTO CUSTOMERS_SL(CUST_DNI, CUST_NAME, CUST_DBIRTH, CUST_ADDRESS, CUST_ZIP, CUST_STATE, CUST_COUNTRY, CUST_PHONE)VALUES(XDNI,XNAME,TO_DATE(XFECHA),XDIR,XZIP,XEDO,XPAIS,XTEL);
        ELSIF SUCURSAL = 'CUMBRES' THEN
            INSERT INTO CUSTOMERS_SS(CUST_DNI, CUST_NAME, CUST_DBIRTH, CUST_ADDRESS, CUST_ZIP, CUST_STATE, CUST_COUNTRY, CUST_PHONE)VALUES(XDNI,XNAME,TO_DATE(XFECHA),XDIR,XZIP,XEDO,XPAIS,XTEL);
        END IF;
        OPEN GRES FOR SELECT 1 FROM DUAL;
        EXCEPTION WHEN OTHERS THEN OPEN GRES FOR SELECT 0 FROM DUAL;
    END;
END;

CREATE OR REPLACE PROCEDURE SP_UPDATECUSTOMER(XDNI VARCHAR2, XNAME VARCHAR2, XFECHA VARCHAR2, XDIR VARCHAR2, XZIP VARCHAR2, XEDO VARCHAR2, XPAIS VARCHAR2, XTEL VARCHAR2, GRES OUT SYS_REFCURSOR) AUTHID CURRENT_USER AS
BEGIN
    BEGIN    
        UPDATE CUSTOMERS_SL SET CUST_NAME = XNAME, CUST_DBIRTH =XFECHA, CUST_ADDRESS = XDIR, CUST_ZIP = XZIP, CUST_STATE = XEDO, CUST_COUNTRY = XPAIS, CUST_PHONE = XTEL WHERE CUST_DNI = XDNI;
        UPDATE CUSTOMERS_SS SET CUST_NAME = XNAME, CUST_DBIRTH =XFECHA, CUST_ADDRESS = XDIR, CUST_ZIP = XZIP, CUST_STATE = XEDO, CUST_COUNTRY = XPAIS, CUST_PHONE = XTEL WHERE CUST_DNI = XDNI;
        OPEN GRES FOR SELECT 1 FROM DUAL;
        EXCEPTION WHEN OTHERS THEN OPEN GRES FOR SELECT 0 FROM DUAL;
    END;
END;

CREATE OR REPLACE PROCEDURE SP_EXISTDNICUSTOMER(XDNI VARCHAR2, GRES OUT SYS_REFCURSOR) AS
BEGIN   
    OPEN GRES FOR SELECT COUNT(*) FROM ALL_CUSTOMERS WHERE CUST_DNI = XDNI;        
END; 

--------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP------------------------------@CHECHESWAP------------------------------------@CHECHESWAP--------------------------------@CHECHESWAP----------------------

COMMIT;
